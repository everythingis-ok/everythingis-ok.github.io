<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>web题目wp</title>
    <link href="/2024/12/06/web%E9%A2%98%E7%9B%AEwp/"/>
    <url>/2024/12/06/web%E9%A2%98%E7%9B%AEwp/</url>
    
    <content type="html"><![CDATA[<h2 id="web题目wp"><a href="#web题目wp" class="headerlink" title="web题目wp"></a>web题目wp</h2><h2 id="1-会赢吗"><a href="#1-会赢吗" class="headerlink" title="1.会赢吗"></a>1.会赢吗</h2><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20154344.png" alt="屏幕截图 2024-11-28 154344"></p><p>先查看网页源代码</p><p>在body部分找到flag第一部分和第二部分地址</p><p>![屏幕截图 2024-11-28 193756](C:\Users\Lenovo\Pictures\Screenshots\屏幕截图 2024-11-28 193756.png)</p><p>进入第二部分</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20154659.png" alt="屏幕截图 2024-11-28 154659"></p><p>提示在控制台进行应用<br>依旧查看网页源代码<img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20194122.png" alt="屏幕截图 2024-11-28 194122"></p><p>可见传一个参数（课程名）调用函数revealFlag<br>课程名</p><p>在控制台输入命令</p><p>![屏幕截图 2024-11-28 203252](C:\Users\Lenovo\Pictures\Screenshots\屏幕截图 2024-11-28 203252.png)<br>revealFlag（’4cqu1siti0n‘)<br>得到第二部分flag 和进入第三部分的网址</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20204212.png" alt="屏幕截图 2024-11-28 204212"></p><p>进入第三部分</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20204321.png" alt="屏幕截图 2024-11-28 204321"></p><p>依旧是查看网页源代码 复制主体部分给ai</p><p>可见我们要把状态改为解封然后点击解封按钮</p><p>把前端代<img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20225511.png" alt="屏幕截图 2024-11-28 225511"></p><p>码修改一下保存</p><p>得到第三部分flag和第四部分地址</p><p>进入第四部分</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20161927.png" alt="屏幕截图 2024-11-28 161927"></p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20225709.png" alt="屏幕截图 2024-11-28 225709"></p><p>查看网页源代码发现 noscript代码部分执行后会显示出flag<br>搜索后得知可以在网页中禁用JavaScript<br>更改后刷新</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20230037.png" alt="屏幕截图 2024-11-28 230037"></p><p>得到最后一部分flag</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20230131.png"></p><p>将每一部分获得的flag拼接在一起 推测是base64编码</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%25E5%25B1%258F%25E5%25B9%2595%25E6%2588%25AA%25E5%259B%25BE%25202024-11-28%2520230356.png" alt="屏幕截图 2024-11-28 230356"></p><p>解码后得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20230356.png" alt="屏幕截图 2024-11-28 230356"></p><h1 id="2-headache3"><a href="#2-headache3" class="headerlink" title="2.headache3"></a>2.headache3</h1><p>打开后依旧先看一下源代码</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20231349.png" alt="屏幕截图 2024-11-28 231349"></p><p>十分简单没什么内容 但是head大写可能是查看什么文件头</p><p>在刷新一下 network部分得到了一个响应包<br>文件头部分有flag</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%25E5%25B1%258F%25E5%25B9%2595%25E6%2588%25AA%25E5%259B%25BE%25202024-11-28%2520231625.png" alt="屏幕截图 2024-11-28 231625"></p><h1 id="3-get"><a href="#3-get" class="headerlink" title="3.get"></a>3.get</h1><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20232121.png" alt="屏幕截图 2024-11-28 232121"></p><p>获得题目后发现是让get传参<br>直接在地址栏里按照要求输入</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20232215.png" alt="屏幕截图 2024-11-28 232215"></p><h1 id="4-POST"><a href="#4-POST" class="headerlink" title="4.POST"></a>4.POST</h1><p>启用场景后发现是要post传参</p><p>burp抓包一下</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%25E5%25B1%258F%25E5%25B9%2595%25E6%2588%25AA%25E5%259B%25BE%25202024-11-28%2520232751.png" alt="屏幕截图 2024-11-28 232751"></p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20232836.png" alt="屏幕截图 2024-11-28 232836"></p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20232942.png" alt="屏幕截图 2024-11-28 232942"></p><p>右键修改请求方式<br>传参（post传参要先空一行再传参）</p><p>![屏幕截图 2024-11-28 233217](C:\Users\Lenovo\Pictures\Screenshots\屏幕截图 2024-11-28 233217.png)</p><p>但是这样传参只能得到字符串‘flag’ 查看评论后发现输入what&#x3D;flag&amp;&#x3D;<br>可以得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-11-28%20234701.png" alt="屏幕截图 2024-11-28 234701"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>这个压缩包有点麻烦</title>
    <link href="/2024/12/05/%E8%BF%99%E4%B8%AA%E5%8E%8B%E7%BC%A9%E5%8C%85%E6%9C%89%E7%82%B9%E9%BA%BB%E7%83%A6/"/>
    <url>/2024/12/05/%E8%BF%99%E4%B8%AA%E5%8E%8B%E7%BC%A9%E5%8C%85%E6%9C%89%E7%82%B9%E9%BA%BB%E7%83%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h1><h2 id="1-这个压缩包有点麻烦"><a href="#1-这个压缩包有点麻烦" class="headerlink" title="1.这个压缩包有点麻烦"></a>1.这个压缩包有点麻烦</h2><p>下载压缩包可以看到有注释，提示是六位数字的暴力破解</p><p>暴力破解得到密码</p><p>密码为 483279</p><p>打开文档后看到提示</p><p>可以确定是使用字典爆破</p><p>​    得到压缩包密码    &amp;-&#96;;qpCKliw2yTR\</p><p>zip压缩包里面还有一个文件和之前的readme是一样的文件（已知部分明文），所以直接明文攻击<br>根据提示：注意将明文压缩时，压缩包的属性要设置为<strong>仅储存</strong></p><p>确保压缩后的zip与同名文档CRC32码一致</p><h3 id="已知明文攻击的方法"><a href="#已知明文攻击的方法" class="headerlink" title="已知明文攻击的方法"></a>已知明文攻击的方法</h3><p>已知明文攻击的特点是已知一个ZIP压缩包中某个文件的原文件（也就是明文），利用已知文件和其压缩加密后的数据获取到压缩包的解压密码或者能对其解压。</p><p>常规已知明文攻击要想成功，需要具备3个条件：</p><p> 1）完整的明文文件。</p><p> 2）明文文件需要被相同的压缩算法标准压缩（也可理解为被相同压缩工具压缩）。</p><p> 3）明文对应文件的加密算法是ZipCrypto Store。</p><p>只需要记住，即使在没有压缩密码的情况下，只要能获取3个密钥，就能实现解密。如果我们已知压缩包中的某个文件，就可以利用算法获取这3个密钥</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205005520726.png" alt="image-20241205005520726"></p><p>单击“开始”按钮后，破解开始。使用ARCHPR进行已 知明文攻击时有一个重大BUG，即使工具已经恢复出3个密钥，程序也不会自动停止，需要我们手动暂停。根据比赛经验，一般程序运行20 ～30分钟就可以手动停止，如果ARCHPR找到了3个密钥，也就是图 1.5.23中的加密密钥，那么单击“停止”后会自动弹出窗口</p><p>单击“确定”后，会弹出新的保存文件窗口</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205013556922.png" alt="image-20241205013556922"></p><p>压缩包里只有一张ipg格式的文件</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205014603949.png" alt="image-20241205014603949"></p><h3 id="分离图片中的隐藏文件"><a href="#分离图片中的隐藏文件" class="headerlink" title="分离图片中的隐藏文件"></a>分离图片中的隐藏文件</h3><h4 id="图片分析"><a href="#图片分析" class="headerlink" title="图片分析"></a>图片分析</h4><p>首先对图片进行分析，用binwalk（<a href="https://so.csdn.net/so/search?q=kali&spm=1001.2101.3001.7020">kali</a>中是自带的，也可以下载到windows中使用）。</p><p>使用方法：binwalk + 文件路径&#x2F;文件名</p><p>执行命令后，binwalk就会自动分析这个jpg文件：</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205015107323.png" alt="image-20241205015107323"></p><p>从分析的结果看，这个jpg文件隐藏着一个zip文件</p><h4 id="图片分离"><a href="#图片分离" class="headerlink" title="图片分离"></a>图片分离</h4><p>1,binwalk分离</p><p>还是使用binwalk工具，使用dd命令分离出隐藏文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=flag.jpg of=1.zip skip=20421 bs=1<br><br></code></pre></td></tr></table></figure><p>解释：if 指定输入文件，of 指定输出文件，skip 指定从输入文件开头跳过20421个块后开始复制，bs设置每次读写块的大小为1字节</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205020021102.png" alt="image-20241205020021102"></p><p>执行后会得到一个1.zip文件。</p><p>2.hex编辑器分类</p><p>经过分析ipg文件里隐藏了一个zip压缩包</p><p>搜索十六进制数值确定zip文件头</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205113642931.png" alt="image-20241205113642931"></p><p>作为选块起始位置</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205113826881.png" alt="image-20241205113826881"></p><p>最后作为选块结束位置</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205113938357.png" alt="image-20241205113938357"></p><p>复制选块至新文件</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205114028296.png" alt="image-20241205114028296"></p><p>得到一个zip压缩包</p><p>打开发现里面有一张ipg图片 需要输入密码</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205114206621.png" alt="image-20241205114206621"></p><h3 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h3><p>伪加密的原理是：ZIP压缩包生成时没有加密，手工修 改“frFlags”或“deFlags”的值，使得同一个文件的这两个字段中 至少一个 为奇数，这样在解压时会弹出密码输入框，无论输入什么密码都会报 错。这种原压缩包没有加密，但通过人工修改造成解压时需要输入密 码的现象，就叫作伪加密。</p><p>破解ZIP伪加密的方法十分简单。</p><p>如果“frFlags”和“deFlags”的值不相 同，例如，“frFlags”的值是奇数，“deFlags”的值是偶数，那么可以 把“frFlags”的值改为“deFlags”的值，然后解压查看结果。</p><p>使“frFlags”和“deFlags”都是同一个奇数，我们仍然怀疑该ZIP文件存 在伪加密，那么可以把这两个字段的值都 减1，改为相同的偶数，然后 进行解压查看其结果。</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205115502622.png" alt="image-20241205115502622"></p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205115520321.png" alt="image-20241205115520321"></p><p>如图把两个值都改为8 </p><p>成功打开压缩包</p><p><img src="https://cdn.jsdelivr.net/gh/everythingis-ok/inage/image-20241205115606936.png" alt="image-20241205115606936"></p><p>得到最终flag</p><p>hgame{W0w!_y0U_Kn0w_z1p_3ncrYpt!}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ctf介绍</title>
    <link href="/2024/10/27/ctf%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/10/27/ctf%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>CTF入门</p><blockquote><p>可选方向<br>web<br>reverse(二进制方向)<br>pwn(二进制方向)</p></blockquote><blockquote><p>必选<br>crypto(密码学)<br>misc（杂项）</p></blockquote><p> CTF竞赛 攻防模式<br> 每队运维3-4个存在漏洞的网络服务 找到漏洞先修复 利用漏洞编写攻击其他队伍</p><h2 id="web方向（网络攻防的重要入口）"><a href="#web方向（网络攻防的重要入口）" class="headerlink" title="web方向（网络攻防的重要入口）"></a>web方向（网络攻防的重要入口）</h2><ul><li>重点关注：网站的安全</li><li>web应用的常见漏洞：<ul><li>SOL注入</li><li>文件上传漏洞</li><li>文件包含漏洞</li><li>反序列化漏洞</li></ul></li></ul><h2 id="Web方向-前端"><a href="#Web方向-前端" class="headerlink" title="Web方向-前端"></a>Web方向-前端</h2><ul><li>前台的显示，外观以及前台的简单交互</li><li>代码实现<ul><li>JaveScript</li><li>HTML</li><li>CSS</li></ul></li></ul><h2 id="cypto方向-密文的安全"><a href="#cypto方向-密文的安全" class="headerlink" title="cypto方向(密文的安全)"></a>cypto方向(密文的安全)</h2><ul><li>重点关注：密文的安全</li><li>密码学常见类型<ul><li>凯撒密码&#x2F;维吉尼亚密码</li><li>DES&#x2F;AES&#x2F;RSA&#x2F;…</li></ul></li></ul><h2 id="Misc方向（现实中广泛应用的安全技术）"><a href="#Misc方向（现实中广泛应用的安全技术）" class="headerlink" title="Misc方向（现实中广泛应用的安全技术）"></a>Misc方向（现实中广泛应用的安全技术）</h2><ul><li><h2 id="Misc题目常见类型：-压缩包破解-隐写-流量分析-…"><a href="#Misc题目常见类型：-压缩包破解-隐写-流量分析-…" class="headerlink" title="Misc题目常见类型：  - 压缩包破解&#x2F;隐写&#x2F;流量分析&#x2F;…"></a>Misc题目常见类型：<br>  - 压缩包破解&#x2F;隐写&#x2F;流量分析&#x2F;…</h2></li></ul><h2 id="Reverse方向（程序破解的基础）"><a href="#Reverse方向（程序破解的基础）" class="headerlink" title="Reverse方向（程序破解的基础）"></a>Reverse方向（程序破解的基础）</h2><ul><li>重点关注：程序运行的逻辑</li><li>逆向还原程序的编程逻辑<ul><li>脱壳&#x2F;加壳</li><li>加密算法程序</li><li>IDA Pro</li></ul></li></ul><h2 id="Pwn方向（二进制漏洞利用的基础）"><a href="#Pwn方向（二进制漏洞利用的基础）" class="headerlink" title="Pwn方向（二进制漏洞利用的基础）"></a>Pwn方向（二进制漏洞利用的基础）</h2><ul><li>重点关注：二进制漏洞的利用</li><li>利用程序的漏洞实现攻击<ul><li>栈溢出</li><li>格式化字符串溢出</li><li>堆溢出</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>week2</title>
    <link href="/2024/10/27/week2/"/>
    <url>/2024/10/27/week2/</url>
    
    <content type="html"><![CDATA[<h1 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h1><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><p>【古典密码】是密码学中的其中一个类型，其大部分加密方式都是利用 <em>替换式密码</em> 或 <em>移项式密码</em>，有时则是两者 的混合。</p><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p>它是一种替换加密的技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成 密文。 例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E。<br>通过排列明文和密文字母表，密文字母表示通过将明文字母表向左或向右移动一个固定数目的位置。例如，当偏移 量是左移3的时候（解密时的密钥就是3）<br>![[Pasted image 20241024224947.png]]</p><h3 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h3><p>是由一些偏移量不同的恺撒密码组成。 为了生成密码，需要使用表格法。 这一表格包括了26行字母表，每一行都由前一行向左偏移一位得到。具体使用哪一行字母表进行编译是基于密钥进 行的，在过程中会不断地变换<br><strong>加密过程</strong>：<br>密钥循环与明文对应表格得到密文<br><strong>解密过程</strong>：找到密钥一列密文对应哪一行<br>![[Pasted image 20241024225437.png]]</p><p>假设明文为：HEETIAN 然后选择某一关键词并重复而得到密钥，如关键词为LAB时，密钥为：LABLABL 对于明文的第一个字母H，对应密钥的第一个字母L，于是使用表格中L行字母表进行加密，得到密文第一个字母S。 类似地，明文第二个字母为E，在表格中使用对应的A行进行加密，得到密文第二个字母E。以此类推，可以得到：<br>明文：HEETIAN 密钥：LABLABL 密文：SEFEIBY<br>解密的过程则与加密相反。 例如：根据密钥第一个字母L所对应的L行字母表，发现密文第一个字母S位于H列，因而明文第一个字母为H。 密钥第二个字母A对应A行字母表，而密文第二个字母E位于此行E列，因而明文第二个字母为E。以此类推便可得到明文</p><h3 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h3><p>培根密码的本质是将字母用一串二进制数替换，但是表示的过程中，没有采取0和1的形式，而使用a和b来代替<br><strong>加密的过程</strong><br>首先将要加密的内容根据加密表里的内容进行替换， 如a用AAAAA替换，b用AAAAB替换。 替换完之 后，我们可以把A和B当作两个不同的特征（如大写&#x2F;小写，正体&#x2F;斜体）带入到一个<em>无关的句子</em>中， 这就得到了我 们加密后的结果。 其本质上是将二进制信息通过样式的区别，加在了正常书写之上。<br>![[Pasted image 20241024231439.png]]<br>例如，假设明文为：HEETIAN 然后选择某一关键词并重复而得到密钥，如关键词为LAB时，密钥为：LABLABL 对于明文的第一个字母H，对应密钥的第一个字母L，于是使用表格中L行字母表进行加密，得到密文第一个字母S。 类似地，明文第二个字母为E，在表格中使用对应的A行进行加密，得到密文第二个字母E。以此类推，可以得到： 明文：HEETIAN 密钥：LABLABL 密文：SEFEIBY 解密的过程则与加密相反。 例如：根据密钥第一个字母L所对应的L行字母表，发现密文第一个字母S位于H列，因而明文第一个字母为H。 密钥第二个字母A对应A行字母表，而密文第二个字母E位于此行E列，因而明文第二个字母为E。以此类推便可得到明文。</p><h3 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h3><p><strong>加密过程</strong>：n栅密码分n组 把每组第一个第二个等分别拿出来形成密文</p><p> 以2栏栅栏密码为例来讲解它的加密和解密过程。 加密过程： 解密过程： 那么如何将2栏密码扩展到多栏呢？在之前的明文中，CIPHER这个单词之后加了一个下划线， 目的就是为了让明文 字符串的长度是2的倍数， 栅栏密码的分栏的一个前提就是分的栏数需是明文长度的因数，这样才会使得分出来的 每个栏长度都一样。 对于多栏，我们还是用上面的例子来讲解。 上面的明文字符串（THERE_IS_A_CIPHER_）的长度是18 所以我们可以把它分为2，3，4，6，9栏，这里我们以6栏为例。 以每个元素相隔6个字符分割出栅栏。 明文：THERE_IS_A_CIPHER_ 两个一组，得到：(TH) (ER) (E_) (IS) (<em>A) (<em>C) (IP) (HE) (R</em>) 先每组中取出第一个字母：TEEI__IHR 再从每组中取出第二个字母：HR_SACPE</em> 连在一起得到密文：TEEI__IHRHR_SACPE_ 而解密的时候，先把密文从中间分开，变为两行： TEEI__IHR HR_SACPE_ 再按上下上下的顺序组合起来： THERE_IS_A_CIPHER_</p><h3 id="希尔密码"><a href="#希尔密码" class="headerlink" title="希尔密码"></a>希尔密码</h3><p>[ASCII码](<a href="https://www.asciim.cn/">ASCII码 - 基本ASCII码和扩展ASCII码,中文最全ASCII码对照表0~255</a>)</p><h4 id="base16"><a href="#base16" class="headerlink" title="base16"></a>base16</h4><ol><li>使用十六个字符（16进制）0-9 A-F 不区分大小写<br><strong>加密过程</strong> 根据ASCII码转换为二进制 四个一组划分 每组再转化为16进制</li></ol><h3 id="base32"><a href="#base32" class="headerlink" title="base32"></a>base32</h3><ol><li>32个可打印字符 （A-Z 2-7）</li><li>Base32主要用于编码二进制数据，但是Base32也能够编码诸如ASCII之类的二进制文本。<br><strong>加密过程</strong> 根据ASCII码转换为二进制 五个一组划分（不够补0） 不足四十倍数补&#x3D;<br>一个&#x3D;相当于五个字节<br>![[Pasted image 20241024233351.png]]</li></ol><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p>64个可打印字符（a-z A-Z 0-9 + &#x2F;）<br>根据ASCII码转换为二进制 6个一组不够补零 整体不够24的倍数补&#x3D; 一个&#x3D;相当于6bit<br>![[Pasted image 20241024234013.png]]</p><p>区分base16 base32 base64<br>有小写base64<br>有等号base32 base64</p><h1 id="MISC-隐写"><a href="#MISC-隐写" class="headerlink" title="MISC-隐写"></a>MISC-隐写</h1><p>原理：把秘密隐藏到普通的信息中，但是目前的隐写术是将某些秘密信息隐藏于数字媒介中，而又不损害载体原来信息的表达，从而掩盖秘密信息。常见的隐写载体包括文本，图像，音频，视频等。比赛中主要考察两点：隐写方法的识别和信息提取。</p><h2 id="图像隐写"><a href="#图像隐写" class="headerlink" title="图像隐写"></a>图像隐写</h2><p>常见的图像隐写分为两类：插入隐写和替换隐藏</p><p>插入隐写：指利用文件格式的冗余性，在不影响文件的正常使用从而隐藏信息，这种方法会导致文件的大小发生变化，<br>将1.jpg和1.zip进行合并之后，仍然得到一个和1.jpg“一摸一样”的图片，但是我们查看文件大小之后发现，大小正好是两者之和。<br>替换隐写（常考）：也就是将几乎不影响文件内容的数据进行修改，达到隐藏信息的目的，最常见的是最低比特位隐写（LSB隐写）。因为有损压缩会损毁修改掉的微小信息</p><h4 id="LSB隐写：在图像中，每一个通道由8比特构成，像素值在0-255之间，在单通道图像中，通过不同的黑白比例达到不同的灰度，三通道图像中（RGB），每个通道代表红，绿，蓝，在RGBA图像中，多出一个透明度通道。因为二进制数据的最后一位大小改变的影响很小，就可以在这里替换数据。"><a href="#LSB隐写：在图像中，每一个通道由8比特构成，像素值在0-255之间，在单通道图像中，通过不同的黑白比例达到不同的灰度，三通道图像中（RGB），每个通道代表红，绿，蓝，在RGBA图像中，多出一个透明度通道。因为二进制数据的最后一位大小改变的影响很小，就可以在这里替换数据。" class="headerlink" title="LSB隐写：在图像中，每一个通道由8比特构成，像素值在0~255之间，在单通道图像中，通过不同的黑白比例达到不同的灰度，三通道图像中（RGB），每个通道代表红，绿，蓝，在RGBA图像中，多出一个透明度通道。因为二进制数据的最后一位大小改变的影响很小，就可以在这里替换数据。"></a>LSB隐写：在图像中，每一个通道由8比特构成，像素值在0~255之间，在单通道图像中，通过不同的黑白比例达到不同的灰度，三通道图像中（RGB），每个通道代表红，绿，蓝，在RGBA图像中，多出一个透明度通道。因为二进制数据的最后一位大小改变的影响很小，就可以在这里替换数据。</h4><p>每一个色素都由RGB（红绿蓝）三种颜色组成，每种颜色的占比不同，所调出来的颜色不同。红218（11011010），绿150（10010110），红（10010101），假如改变每种颜色二进制数字的最后一位，对于整体的颜色改变， 肉眼并不能观察出来，从而达到隐藏信息的目的</p><h3 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h3><p>PNG图片（无损压缩）<br>PNG图片文件头的16进制表示：89 50 4E 47<br>一个png图片的数据可以分为多个数据块。</p><p>我们之所以能看到图片，就是因为图片查看器将图片所对应的二进制字节流按照它的解释规则将图片转换为色素块，分析一个图片通常是查看它的原始二进制字节流</p><ol><li><p>IHDR数据块：文件头数据块，通常包含图片的高度和宽度等基本属性，可以通过将crc还原出来所对应的&#x3D;&#x3D;高度&#x3D;&#x3D;和&#x3D;&#x3D;宽度&#x3D;&#x3D;来找到flag。<br> ![[Pasted image 20241027121726.png]]</p></li><li><p>cHRM数据块。</p></li><li><p>IDAT数据块（多个）（包含图片内容）：包含了数据的构成参数。如果该数据块有问题，有一种题型是在该数据块中存有压缩包，通过Zlib工具解压缩查看内容。</p></li><li><p>IEAD数据块：图片结束标志。</p></li></ol><h3 id="JPG-（有损或者无损）"><a href="#JPG-（有损或者无损）" class="headerlink" title="JPG （有损或者无损）"></a>JPG （有损或者无损）</h3><p>JPG图片（由一个一个段组成）</p><p>文件头识别：FFD8</p><h3 id="GIF（无损）"><a href="#GIF（无损）" class="headerlink" title="GIF（无损）"></a>GIF（无损）</h3><p>GIF图片文件头：GIF89a&#x2F;GIF87a</p><h1 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h1><p><strong>流量捕获</strong> 通常题目会提供一个 .pcap 文件，它是网络数据包的捕获文件，我们需要分析其中的流量数据。<br>流量分析的常见流程</p><ol><li>初步检查流量文件 使用Wireshark打开 </li><li>协议识别与分析 .pcap 文件，查看流量总量、协议类型</li><li>查找最多或者最少流量。 </li><li>筛选和过滤数据包 使用Wireshark的过滤器功能，逐步缩小感兴趣的范围。比如，HTTP流量的过滤条件 是http，DNS是 dns ，通过源&#x2F;目的IP、端口等进一步过滤。</li><li>查找数据流</li></ol><p>搜索格式为frame contains “ “<br>Liunx系统下配置文件放在etc目录 下，</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/21/hello-world/"/>
    <url>/2024/10/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
